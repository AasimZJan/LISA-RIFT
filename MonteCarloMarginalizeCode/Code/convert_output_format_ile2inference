#!/usr/bin/env python
""""
ACTION
 - Reads in ile output.  Outputs flat ascii file, compatible with tools that parse lalinference output
EXAMPLES
  gsiscp ldas-jobs.ligo.caltech.edu:~pankow/param_est/data/zero_noise_mdc/unpin_single/zero_noise_tref_unpinned.xml.gz 
  python convert_output_format_ile2inference zero_noise_tref_unpinned.xml.gz  | more



"""


import sys
from optparse import OptionParser
import numpy as np
from glue.ligolw import utils, table, lsctables, ligolw

# Contenthandlers : argh
#   - http://software.ligo.org/docs/glue/
lsctables.use_in(ligolw.LIGOLWContentHandler)

def mc(m1,m2):
    return np.power(m1*m2, 3./5.)/np.power(m1+m2, 1./5.)
def eta(m1,m2):
    return m1*m2/(np.power(m1+m2, 2))

optp = OptionParser()
opts, args = optp.parse_args()


print "# m1 m2 s1x s1y s1z s2x s2y s2z mc eta indx  Npts ra dec tref phiorb incl psi  dist p ps lnL "
for fname in args:
    points = table.get_table(utils.load_filename(fname,contenthandler=ligolw.LIGOLWContentHandler), lsctables.SimInspiralTable.tableName)
    like = [row.alpha1 for row in points]  # hardcoded name
    p = [row.alpha2 for row in points]
    ps = [row.alpha3 for row in points]
    Nmax = np.max([int(row.simulation_id) for row in points])+1
    sim_id = np.array([int(row.simulation_id) for row in points])+1


    for indx in np.arange(len(points)):
        pt = points[indx]
        print pt.mass1, pt.mass2, pt.spin1x, pt.spin1y, pt.spin1z, pt.spin2x, pt.spin2y, pt.spin2z, mc(pt.mass1,pt.mass2), eta(pt.mass1,pt.mass2), \
            sim_id[indx], \
            Nmax, \
            pt.longitude, \
            pt.latitude, \
            pt.geocent_end_time + 1e-9* pt.geocent_end_time_ns, \
            pt.coa_phase,  \
            pt.inclination, \
            pt.polarization, \
            pt.distance, \
            p[indx],ps[indx],like[indx]
#    print pt.geocent_end_time + 1e-9* pt.geocent_end_time_ns, pt.coa_phase,  pt.inclination, pt.polarization, pt.longitude,pt.latitude, pt.distance, ind like[indx]
