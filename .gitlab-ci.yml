variables:
  BRANCH: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  COMMIT: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  RIFT_IMAGE: $CI_REGISTRY_IMAGE/rift


default:
  image: debian:latest

stages:
  - system tests
  - unit tests # TODO: write some
  - docs
  - docker image
  - deploy

before_script:
  # setup
  - apt-get update --assume-yes && apt-get upgrade --assume-yes && apt-get install --assume-yes git python3-pip
  # Create alias for /usr/bin/python3 -> /usr/bin/python
  - ln -s /usr/bin/python3 /usr/bin/python
  # upgrade pip
  - python -m pip install --quiet --upgrade pip
  # install requirements
  - python -m pip install -r requirements.txt
  # install test-only requirements
  - python -m pip install coverage pytest
  # install this package (need editable for coverage)
  - python -m pip install --editable .

help_check:
  stage: system tests
  script:
    - . .travis/test-all-bin.sh

import_check:
  stage: system tests
  script:
    - python .travis/test-all-mod.py

test_run:
  stage: system tests
  script:
    - . .travis/test-coord.sh
    - . .travis/test-integrate.sh
    - . .travis/test-posterior.sh
    - . .travis/test-run.sh

build:test:
  image: docker:latest
  stage: docker image
  script:  
   -  docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - suffix=$(echo $CI_COMMIT_BRANCH | cut -d "-" -f 2)
    - docker build --rm --no-cache -t $RIFT_IMAGE:$suffix --file Dockerfile .
    - docker push $RIFT_IMAGE:$suffix


documentation:
  stage: docs
  image: debian:latest
  script:
    - apt-get -y install graphviz
    # Sphinx-multiversion needs to be run on the git repo itself
    - cd docs
    - pip install -r requirements.txt
    - make clean
    # Sphinx-multiversion needs to be run from the top-level
    - git fetch origin master
    - git status
    - git branch
    - sphinx-build docs/ docs/_build/

  artifacts:
    paths:
      - docs/_build/
      
      
      
  # deploy: from bilby_pipe CI: https://git.ligo.org/lscsoft/bilby_pipe/-/blob/master/.gitlab-ci.yml 
  pages:
    stage: deploy
    #needs: ["unit-tests", "docs"]
    script:
      - mkdir public/
      #- mv htmlcov_$PRIMARY_VERSION/ public/
      - mv docs/_build/* public/
    artifacts:
     paths:
       - public
      expire_in: 30 days
    only:
     - master


  
  deploy_release:
    stage: deploy
    image: $PRIMARY_IMAGE
    # needs: ["lookup-tables"]
    variables:
      TWINE_USERNAME: $PYPI_USERNAME
      TWINE_PASSWORD: $PYPI_PASSWORD
    before_script:
     - pip install twine setuptools_scm
     - python setup.py sdist
   script:
      - twine upload dist/*
   only:
      - tags

